name: Deploy to ECS

on:
  push:
    branches: [main]

env:
  JAVA_VERSION: '21'

jobs:
  # 변경사항 감지
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      api-user: ${{ steps.filter.outputs.api-user }}
      api-admin: ${{ steps.filter.outputs.api-admin }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  # 이전 커밋과 비교를 위해

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            api-user:
              - 'api-user/**'
              - 'storage/**'
              - 'support/**'
              - 'build.gradle'
              - 'settings.gradle'
            api-admin:
              - 'api-admin/**'
              - 'storage/**'
              - 'support/**'
              - 'build.gradle'
              - 'settings.gradle'

  # --- 병렬 배포 작업 ---

  # api-user 배포 (변경시에만)
  deploy-api-user:
    name: Build and Deploy api-user
    needs: detect-changes
    if: needs.detect-changes.outputs.api-user == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4  # 소스코드 체크아웃

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      # api-user 모듈만 빌드 - Jar 생성, 테스트 생략(CI 단계에서 테스트 수행)
      - name: Build api-user only
        run: ./gradlew :api-user:bootJar -x test

      # AWS 인증 설정 (IAM 접근키, 시크릿키)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Docker 이미지 빌드 및 ECR 푸시
      - name: Build and push api-user Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mini-shopping/api-user
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f api-user/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # 기존 ECS 태스크 정의 내려받기 (변경 준비)
      - name: Download current api-user task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition api-user-task \
            --query taskDefinition \
            | jq 'del(.enableFaultInjection)' > task-definition-user.json
          cat task-definition-user.json

      # 이미지 태그만 새 값으로 바꿔서 task definition 렌더링
      - name: Update api-user task definition
        id: task-def-user
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-user.json
          container-name: api-user
          image: ${{ steps.login-ecr.outputs.registry }}/mini-shopping/api-user:${{ github.sha }}

      # ECS 서비스에 신규 태스크 정의로 배포
      - name: Deploy api-user to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-user.outputs.task-definition }}
          service: api-user-service
          cluster: mini-shopping-cluster
          wait-for-service-stability: true

  # api-admin 배포 (변경시에만)
  deploy-api-admin:
    name: Build and Deploy api-admin
    needs: detect-changes
    if: needs.detect-changes.outputs.api-admin == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      # api-admin 모듈만 빌드 - Jar 생성, 테스트 생략(CI 단계에서 테스트 수행)
      - name: Build api-admin only
        run: ./gradlew :api-admin:bootJar -x test

      # AWS 인증 설정 (IAM 접근키, 시크릿키)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Docker 이미지 빌드 및 ECR 푸시
      - name: Build and push api-admin Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mini-shopping/api-admin
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f api-admin/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # 기존 ECS 태스크 정의 내려받기 (변경 준비)
      - name: Download current api-admin task definition
        run: |
          aws ecs describe-task-definition \
            --task-definition api-admin-task \
            --query taskDefinition \
            | jq 'del(.enableFaultInjection)' > task-definition-admin.json
          cat task-definition-admin.json

      # 이미지 태그만 새 값으로 바꿔서 task definition 렌더링
      - name: Update api-admin task definition
        id: task-def-admin
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition-admin.json
          container-name: api-admin
          image: ${{ steps.login-ecr.outputs.registry }}/mini-shopping/api-admin:${{ github.sha }}

      # ECS 서비스에 신규 태스크 정의로 배포
      - name: Deploy api-admin to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-admin.outputs.task-definition }}
          service: api-admin-service
          cluster: mini-shopping-cluster
          wait-for-service-stability: true


  # --- 릴리즈 노트 자동 생성 Job ---
  create-release-note:
    name: Create Release Note
    runs-on: ubuntu-latest
    needs: [deploy-api-user, deploy-api-admin]
    if: |
      always() && (needs.deploy-api-user.result == 'success' || needs.deploy-api-admin.result == 'success')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 공통 모듈(storage, support) 변경 감지
      - name: Detect if storage/support changed
        id: common_change
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -qE '^storage/|^support/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      # PR 정보 추출 (PR 머지 기반인 경우)
      - name: Get PR Info (optional)
        id: prinfo
        if: github.event.pull_request != null
        run: |
          echo "number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT

      # 변경 파일/커밋 로그 추출 (changelog)
      - name: Generate changelog
        id: changelog
        run: |
          echo "log<<EOF" >> $GITHUB_OUTPUT
          git log --pretty=format:'- %h %s (%an)' ${{ github.event.before }}..${{ github.sha }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "files<<EOF" >> $GITHUB_OUTPUT
          git diff --name-only ${{ github.event.before }} ${{ github.sha }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # ECR 이미지 digest 추출 (api-user)
      - name: Get image digest api-user
        id: digest_user
        run: |
          digest=$(aws ecr describe-images --repository-name mini-shopping/api-user --image-ids imageTag=${{ github.sha }} --query 'imageDetails[0].imageDigest' --output text)
          echo "digest=$digest" >> $GITHUB_OUTPUT

      # ECR 이미지 digest 추출 (api-admin)
      - name: Get image digest api-admin
        id: digest_admin
        run: |
          digest=$(aws ecr describe-images --repository-name mini-shopping/api-admin --image-ids imageTag=${{ github.sha }} --query 'imageDetails[0].imageDigest' --output text)
          echo "digest=$digest" >> $GITHUB_OUTPUT

      # 릴리즈 노트/릴리즈 생성(GitHub Releases)
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.sha }}
          name: Release ${{ github.sha }}
          body: |
            ## 🚀 ECS 배포 완료
            - **api-user 배포됨:** ${{ needs.deploy-api-user.result == 'success' }}
              - ECR 태그: `${{ github.sha }}`
              - Digest: ${{ steps.digest_user.outputs.digest }}
            
            - **api-admin 배포됨:** ${{ needs.deploy-api-admin.result == 'success' }}
              - ECR 태그: `${{ github.sha }}`
              - Digest: ${{ steps.digest_admin.outputs.digest }}
            
            - 공통 모듈 변경됨: ${{ steps.common_change.outputs.changed }}
            - 커밋 메시지: ${{ github.event.head_commit.message }}
            - 커밋 링크: [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
            - PR 번호: ${{ steps.prinfo.outputs.number }}
            - PR 제목: ${{ steps.prinfo.outputs.title }}
            - PR 작성자: ${{ steps.prinfo.outputs.author }}

            - 변경 파일:
            ```
            ${{ steps.changelog.outputs.files }}
            ```

            - 커밋 로그:
            ```
            ${{ steps.changelog.outputs.log }}
            ```

            - 릴리즈 작성자: ${{ github.actor }}
            - 배포 환경: ${{ env.ENVIRONMENT }}

            > 롤백/재배포할 때 ECR 태그/ Digest/ 커밋 SHA를 참고

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ENVIRONMENT: production

