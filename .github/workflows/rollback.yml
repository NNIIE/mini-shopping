name: Rollback ECS Service

on:
  workflow_dispatch:
    inputs:
      service:
        description: '롤백할 서비스 선택'
        required: true
        type: choice
        options:
          - api-user
          - api-admin
          - both
      ecr_tag:
        description: '롤백할 ECR 태그 (릴리즈 노트에서 복사)'
        required: true
        type: string
      reason:
        description: '롤백 사유'
        required: true
        type: string

permissions:
  contents: write
  issues: write

env:
  AWS_REGION: 'ap-northeast-2'

jobs:
  rollback:
    name: Rollback ${{ github.event.inputs.service }}
    runs-on: ubuntu-latest
    outputs:
      rollback-success: ${{ steps.wait-deployment.outputs.success }}
    steps:
      # AWS 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 이미지 확인 및 롤백 실행
      - name: Execute rollback
        run: |
          # api-user 롤백
          if [[ "${{ github.event.inputs.service }}" == "api-user" ]] || [[ "${{ github.event.inputs.service }}" == "both" ]]; then
            echo "🔄 api-user 롤백 중..."
          
            # 이미지 확인
            aws ecr describe-images \
              --repository-name mini-shopping/api-user \
              --image-ids imageTag=${{ github.event.inputs.ecr_tag }} || exit 1
          
            # 태스크 정의 업데이트
            aws ecs describe-task-definition \
              --task-definition api-user-task \
              --query taskDefinition > task-def.json
          
            jq '.containerDefinitions[0].image = "${{ steps.login-ecr.outputs.registry }}/mini-shopping/api-user:${{ github.event.inputs.ecr_tag }}"' \
              task-def.json | \
            jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .enableFaultInjection)' \
              > new-task-def.json
          
            TASK_ARN=$(aws ecs register-task-definition \
              --cli-input-json file://new-task-def.json \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text)
          
            aws ecs update-service \
              --cluster mini-shopping-cluster \
              --service api-user-service \
              --task-definition $TASK_ARN \
              --force-new-deployment
          fi
          
          # api-admin 롤백
          if [[ "${{ github.event.inputs.service }}" == "api-admin" ]] || [[ "${{ github.event.inputs.service }}" == "both" ]]; then
            echo "🔄 api-admin 롤백 중..."
          
            # 이미지 확인
            aws ecr describe-images \
              --repository-name mini-shopping/api-admin \
              --image-ids imageTag=${{ github.event.inputs.ecr_tag }} || exit 1
          
            # 태스크 정의 업데이트
            aws ecs describe-task-definition \
              --task-definition api-admin-task \
              --query taskDefinition > task-def.json
          
            jq '.containerDefinitions[0].image = "${{ steps.login-ecr.outputs.registry }}/mini-shopping/api-admin:${{ github.event.inputs.ecr_tag }}"' \
              task-def.json | \
            jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .enableFaultInjection)' \
              > new-task-def.json
          
            TASK_ARN=$(aws ecs register-task-definition \
              --cli-input-json file://new-task-def.json \
              --query 'taskDefinition.taskDefinitionArn' \
              --output text)
          
            aws ecs update-service \
              --cluster mini-shopping-cluster \
              --service api-admin-service \
              --task-definition $TASK_ARN \
              --force-new-deployment
          fi

      # 배포 완료 대기
      - name: Wait for deployment
        id: wait-deployment
        run: |
          echo "⏳ 배포 완료 대기 중..."
          
          wait_for_service() {
            local service=$1
            local max_attempts=40
            local attempt=0
          
            while [ $attempt -lt $max_attempts ]; do
              ROLLOUT_STATE=$(aws ecs describe-services \
                --cluster mini-shopping-cluster \
                --services $service \
                --query 'services[0].deployments[0].rolloutState' \
                --output text)
          
              if [ "$ROLLOUT_STATE" == "COMPLETED" ]; then
                echo "✅ $service 배포 완료"
                return 0
              elif [ "$ROLLOUT_STATE" == "FAILED" ]; then
                echo "❌ $service 배포 실패"
                return 1
              fi
          
              sleep 15
              ((attempt++))
            done
            return 1
          }
          
          SUCCESS="true"
          
          if [[ "${{ github.event.inputs.service }}" == "api-user" ]] || [[ "${{ github.event.inputs.service }}" == "both" ]]; then
            wait_for_service "api-user-service" || SUCCESS="false"
          fi
          
          if [[ "${{ github.event.inputs.service }}" == "api-admin" ]] || [[ "${{ github.event.inputs.service }}" == "both" ]]; then
            wait_for_service "api-admin-service" || SUCCESS="false"
          fi
          
          echo "success=$SUCCESS" >> $GITHUB_OUTPUT

  # 롤백 후 새 릴리즈 생성 (현재 운영 버전 반영)
  create-current-release:
    name: Create Current State Release
    needs: rollback
    if: needs.rollback.outputs.rollback-success == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # AWS 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # 현재 운영 중인 버전 정보 수집
      - name: Get current running versions
        id: current-versions
        run: |
          echo "📊 현재 운영 버전 확인 중..."
          
          # api-user 현재 정보
          USER_TASK_DEF=$(aws ecs describe-services \
            --cluster mini-shopping-cluster \
            --services api-user-service \
            --query 'services[0].taskDefinition' \
            --output text)
          
          USER_IMAGE=$(aws ecs describe-task-definition \
            --task-definition $USER_TASK_DEF \
            --query 'taskDefinition.containerDefinitions[0].image' \
            --output text)
          
          USER_TAG=$(echo $USER_IMAGE | awk -F':' '{print $NF}')
          USER_DIGEST=$(aws ecr describe-images \
            --repository-name mini-shopping/api-user \
            --image-ids imageTag=$USER_TAG \
            --query 'imageDetails[0].imageDigest' \
            --output text || echo "N/A")
          
          echo "api-user-tag=$USER_TAG" >> $GITHUB_OUTPUT
          echo "api-user-digest=$USER_DIGEST" >> $GITHUB_OUTPUT
          
          # api-admin 현재 정보
          ADMIN_TASK_DEF=$(aws ecs describe-services \
            --cluster mini-shopping-cluster \
            --services api-admin-service \
            --query 'services[0].taskDefinition' \
            --output text)
          
          ADMIN_IMAGE=$(aws ecs describe-task-definition \
            --task-definition $ADMIN_TASK_DEF \
            --query 'taskDefinition.containerDefinitions[0].image' \
            --output text)
          
          ADMIN_TAG=$(echo $ADMIN_IMAGE | awk -F':' '{print $NF}')
          ADMIN_DIGEST=$(aws ecr describe-images \
            --repository-name mini-shopping/api-admin \
            --image-ids imageTag=$ADMIN_TAG \
            --query 'imageDetails[0].imageDigest' \
            --output text || echo "N/A")
          
          echo "api-admin-tag=$ADMIN_TAG" >> $GITHUB_OUTPUT
          echo "api-admin-digest=$ADMIN_DIGEST" >> $GITHUB_OUTPUT
          
          # 롤백 여부 확인
          if [[ "$USER_TAG" == "${{ github.event.inputs.ecr_tag }}" ]]; then
            echo "api-user-rollback=true" >> $GITHUB_OUTPUT
          else
            echo "api-user-rollback=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$ADMIN_TAG" == "${{ github.event.inputs.ecr_tag }}" ]]; then
            echo "api-admin-rollback=true" >> $GITHUB_OUTPUT
          else
            echo "api-admin-rollback=false" >> $GITHUB_OUTPUT
          fi

      # 현재 시간
      - name: Get current date
        id: date
        run: |
          echo "datetime=$(TZ=Asia/Seoul date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT
          echo "timestamp=$(TZ=Asia/Seoul date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      # 새 릴리즈 생성 (현재 운영 상태 반영)
      - name: Create new release with current state
        uses: softprops/action-gh-release@v2
        with:
          tag_name: deploy-${{ github.run_number }}
          name: Deploy #${{ github.run_number }} - ${{ steps.date.outputs.datetime }} (Rollback)
          body: |
            ## 🚀 ECS 배포 완료
            
            ### 배포 정보
            - **배포 시간:** ${{ steps.date.outputs.datetime }} (KST)
            - **배포 번호:** #${{ github.run_number }}
            - **배포 타입:** 🔄 롤백 (${{ github.event.inputs.service }})
            - **롤백 사유:** ${{ github.event.inputs.reason }}
            
            ### 배포 결과
            - **api-user:** ${{ steps.current-versions.outputs.api-user-rollback == 'true' && '🔄 롤백됨' || '✅ 현재 버전 유지' }}
              - ECR 태그: `${{ steps.current-versions.outputs.api-user-tag }}`
              - Digest: `${{ steps.current-versions.outputs.api-user-digest }}`
            
            - **api-admin:** ${{ steps.current-versions.outputs.api-admin-rollback == 'true' && '🔄 롤백됨' || '✅ 현재 버전 유지' }}
              - ECR 태그: `${{ steps.current-versions.outputs.api-admin-tag }}`
              - Digest: `${{ steps.current-versions.outputs.api-admin-digest }}`
            
            ### 롤백 정보
            - **롤백 대상:** ${{ github.event.inputs.service }}
            - **롤백된 버전:** `${{ github.event.inputs.ecr_tag }}`
            - **실행자:** @${{ github.actor }}
            
            ### 변경 내역
            - **변경 타입:** 버전 롤백
            - **영향 범위:** ${{ github.event.inputs.service }}
            
            ### 기타 정보
            - **릴리즈 작성자:** @${{ github.actor }}
            - **배포 환경:** Production
            - **Actions 링크:** [Run #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ---
            
            > ⚠️ **주의**: 이것은 롤백으로 생성된 릴리즈입니다. 일부 서비스가 이전 버전으로 되돌려졌습니다.